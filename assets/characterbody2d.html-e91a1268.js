import{_ as o,r as t,o as c,c as r,d as a,f as s}from"./app-ed0390b9.js";const l={},i=s('<div class="custom-container tip"><p class="custom-container-title">CharacterBody2D 是干什么的？</p><p>CharacterBody2D 节点，专门用于创建通过脚本移动的角色<code>2D 物理物体</code>。</p><p>这类物理体，通常是由用户控制的角色，必须按照特定的方式移动、与世界发生碰撞。</p></div><div class="custom-container danger"><p class="custom-container-title">该如何移动 CharacterBody2D 物理体？</p><p>在 Godot 中，我们通过 <code>velocity 属性</code> 和 <code>move_and_slide() 方法</code> 来移动 CharacterBody2D 物理体。</p><p>在 _physics_process() 函数中，一旦我们修改了 velocity 属性，move_and_slide() 方法就会根据当前的 velocity 属性，来移动 CharacterBody2D 物理体。</p></div><div class="custom-container warning"><p class="custom-container-title">CharacterBody2D API</p><ul><li><strong>CharacterBody2D:</strong><ul><li>属性: <ul><li><strong>velocity</strong> <code>[默认： Vector2(0, 0)]</code> 当前速度向量(像素px/秒s)</li></ul></li><li>方法: <ul><li><strong>move_and_slide()</strong> 根据 velocity 移动该物体。</li><li><strong>is_on_floor()</strong> 用于判断该物体是否在地板发生了碰撞。</li></ul></li></ul></li></ul></div>',3);function n(d,_){const e=t("PageHeader");return c(),r("div",null,[a(e,{content:"CharacterBody2D 节点"}),i])}const u=o(l,[["render",n],["__file","characterbody2d.html.vue"]]);export{u as default};
