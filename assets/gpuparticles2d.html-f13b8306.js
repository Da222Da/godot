import{_ as a,r as i,o as c,c as l,d as t,f as o}from"./app-ed0390b9.js";const d={},r=o('<p>在 Godot 中，<code>GPUParticles2D节点</code>是用来创建基于 GPU 的 2D 粒子效果的。它可以实现高性能的粒子系统，可以在屏幕上呈现大量的粒子而不会降低性能。</p><p>您可以使用 GPUParticles2D 节点来创建各种粒子效果，如火焰、烟雾、火花等。您可以通过调整节点的属性来控制粒子的外观、行为和运动方式。</p><div class="custom-container warning"><p class="custom-container-title">相关 API</p><h4 id="继承关系" tabindex="-1"><a class="header-anchor" href="#继承关系" aria-hidden="true">#</a> 继承关系</h4><p>Object &gt; Node &gt; CanvasItem &gt; Node2D &gt; GPUParticles2D</p><h4 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h4><ul><li><p>GPUParticles2D 类:</p><ul><li><code>process_material</code> 用于处理粒子效果的材质。也就是自定义粒子的外观和行为： <ul><li><code>新增 ParticleProcessMaterial</code> 使用纹理贴图的方式，来实现粒子的外观和行为。</li><li><code>新增 ShaderMaterial</code> 使用着色器 Shader，来实现粒子的外观和行为。</li></ul></li><li><code>emitting</code> 用于控制粒子系统是否正在发射粒子。</li><li><code>amount</code> 用于控制粒子系统发射的粒子数量。</li></ul></li><li><p>Time 类:</p><ul><li><code>lifetime</code> 用于设置每个粒子存在的时间。</li><li><code>one_shot</code> 用于确定粒子系统是连续发射粒子还是仅发射一次。</li><li><code>preprocess</code> 粒子系统启动时，好像已经运行了这么多秒。</li></ul></li><li><p>CanvasItem 类</p><ul><li><code>Material &gt; particles_animation</code> 用于编辑精灵表图像资源。</li></ul></li></ul></div>',3);function s(n,p){const e=i("PageHeader");return c(),l("div",null,[t(e,{content:"GPUParticles2D: 粒子发射器："}),r])}const h=a(d,[["render",s],["__file","gpuparticles2d.html.vue"]]);export{h as default};
