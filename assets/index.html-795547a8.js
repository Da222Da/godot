import{_ as a,r as c,o as s,c as l,a as e,d as o,w as n,b as i,f as d}from"./app-ed0390b9.js";const r={},u=d('<h1 id="用户输入" tabindex="-1"><a class="header-anchor" href="#用户输入" aria-hidden="true">#</a> 用户输入</h1><p>用户输入是指玩家通过输入设备<code>键盘、鼠标、手柄或触摸屏等</code>与游戏进行互动的过程。</p><p>而 Godot 引擎提供了一系列强大的功能，帮助我们检测、并响应用户输入。</p><div class="custom-container tip"><p class="custom-container-title">用户输入 —— 知识结构</p><ul><li><strong>InputEvent 类： 各种输入事件的抽象基类</strong><ul><li><code>is_action_pressed(action) 方法</code> 如果指定动作正在被按下，则返回 true。</li><li><code>is_action_released(action) 方法</code> 如果指定动作被释放了，则返回 true。</li><li><code>is_action_just_pressed(action) 方法</code> 只在用户按下按钮的那一帧中为 true。</li></ul></li><li><strong>Input 单例类: 用于检测和响应各种输入事件</strong><ul><li><code>Input.get_axis(a1, a2)</code>通过指定两个动作来获取轴的输入<code>a1 = -1 &amp; a2 = 1 &amp; d=0</code>。</li></ul></li><li><strong>Node._input(event) 内置函数</strong> 当玩家触发输入事件时，就会触发该函数。</li></ul></div>',4),_={class:"custom-container danger"},p=e("p",{class:"custom-container-title"},"常见问题",-1);function m(h,f){const t=c("RouterLink");return s(),l("div",null,[u,e("div",_,[p,e("ul",null,[e("li",null,[o(t,{to:"/input-handling/get-user-input.html"},{default:n(()=>[i("如何使用 GDScript 脚本来监听用户输入？")]),_:1})]),e("li",null,[o(t,{to:"/input-handling/custom-input-map/"},{default:n(()=>[i("如何自定义输入动作？")]),_:1})])])])])}const x=a(r,[["render",m],["__file","index.html.vue"]]);export{x as default};
