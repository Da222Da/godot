import{_ as d,r as o,o as n,c as a,d as i,a as e,w as s,b as l,f as r}from"./app-ed0390b9.js";const _={},u=e("h1",{id:"物理引擎",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#物理引擎","aria-hidden":"true"},"#"),l(" 物理引擎")],-1),p=e("p",null,"物理引擎可以看做是 Godot 引擎一个内置系统，它负责处理游戏中的物理模拟，包括但不限于刚体的运动、碰撞检测、力学效应（如重力和摩擦力）以及其他物理现象。使得开发者能够创建出具有真实物理行为的游戏世界。",-1),h={class:"custom-container danger"},y=e("p",{class:"custom-container-title"},"常见问题",-1),m=r('<div class="custom-container tip"><p class="custom-container-title">物理引擎 - 知识体系</p><h4 id="_2d-场景相关" tabindex="-1"><a class="header-anchor" href="#_2d-场景相关" aria-hidden="true">#</a> 2D 场景相关</h4><ul><li><strong>Area2D ，创建 2D 碰撞检测区域</strong><ul><li><code>body_entered 信号</code> 物体进入该区域的内置信号</li></ul></li><li><strong>PhysicsBody2D 2D 物理体</strong><ul><li><code>CharacterBody2D 运动体节点</code>，创建“靠代码控制来移动 2D 物理体” <ul><li><code>velocity</code> 当前速度向量，调用 move_and_slide() 期间会进行使用并修改。</li><li><code>move_and_slide() 函数</code> 根据 velocity 移动该物体。</li><li><code>is_on_floor()</code> 判断物体是否与地板发生了碰撞。</li></ul></li><li><code>RigidBody2D 刚体节点</code>，靠外力才能被移动的 2D 物理体</li><li><code>StaticBody2D 静态体节点</code>，创建无法被移动的 2D 物理体。</li><li><code>AnimatableBody2D 动画物理体</code> 配合<code>AnimationPlayer</code>可以做动画的 2D 物理体。</li></ul></li><li><strong>CollisionShape 碰撞形状</strong><ul><li><code>CollisionShape2D 节点</code>， 定义二维碰撞形状 <ul><li><code>shape 属性</code> 形状 <ul><li><code>WorldBoundaryShape2D 选项</code> 用于创建无限延伸的地面形状。</li></ul></li><li><code>disabled 属性</code> 是否禁用碰撞。</li><li><code>one_way_collision 属性</code> 是否启用单向碰撞。</li></ul></li><li><code>CollisionPolygon2D 节点</code> 用于定义二维多边形碰撞形状。</li></ul></li></ul><h4 id="_3d-场景相关" tabindex="-1"><a class="header-anchor" href="#_3d-场景相关" aria-hidden="true">#</a> 3D 场景相关</h4><ul><li><strong>PhysicsBody3D 3D 物理体</strong><ul><li><code>RigidBody3D 刚体节点</code>，靠外力才能被移动的 3D 物理体 <ul><li><code>apply_force() &amp; apply_central_force()</code> 对实体施加一个定向力<code>是否影响旋转?</code></li><li><code>apply_torque()</code> 施加旋转力</li><li>碰撞检测： <ul><li><code>contact_monitor</code> 是否开启接触监控</li><li><code>max_contacts_reported</code> 指定物理引擎在每帧中处理的最大接触点数量，从而影响物理模拟的准确性和性能。</li></ul></li></ul></li></ul></li></ul></div>',1);function D(v,g){const t=o("BasicConcept"),c=o("RouterLink");return n(),a("div",null,[u,p,i(t,{data:[{title:"物理体 PhysicsBody",content:"是指能够与 Godot 物理系统进行交互的节点对象。"},{title:"碰撞形状 CollisionShape",content:"指定物理体的碰撞检测区域。"},{title:"碰撞层 Collision Layer",content:"指定该物理体所属的碰撞图层。",type:"danger"},{title:"遮罩 Collision Mask",content:"指定该物理体可以与哪些碰撞图层发生碰撞。",type:"danger"},{title:"线速度 Linear Velocity",content:"是指物体沿着某一特定方向做“直线运动”时的移动速度。"},{title:"角速度 Angular Velocity",content:"是指物体绕着某一点的做`旋转运动`时的旋转速度。"},{title:"线性阻尼 Linear Damp",content:"<div>用于模拟物体在移动过程中受到的阻力。</div><br/><div>线性阻尼可以随着时间的推移逐渐地减缓物体的线性速度，并最终停止移动。</div>",elType:"popover"},{title:"旋转阻尼 Angular Damp",content:"<div>用于模拟物体在旋转过程中受到的阻力。</div><br/><div>线性旋转可以随着时间的推移逐渐地减缓物体的旋转速度，并最终停止移动。</div>",elType:"popover"},{title:"定向力 Directive Force",content:"定向力是指在特定方向上起作用的力，比如将物体推向特定方向。"}]}),e("div",h,[y,e("ul",null,[e("li",null,[i(c,{to:"/physic-system/physics_process.html"},{default:s(()=>[l("在 Godot 中，_physics_process() 和 _process() 有什么区别？")]),_:1})])])]),m])}const B=d(_,[["render",D],["__file","index.html.vue"]]);export{B as default};
